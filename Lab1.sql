-- Question 1
DROP DATABASE IF EXISTS airlineDB;

CREATE DATABASE airlineDB;

USE airlineDB;

CREATE TABLE
    employee (
        emp_id INT auto_increment PRIMARY KEY,
        name VARCHAR(100) NOT NULL,
        salary DECIMAL(10, 2) DEFAULT 100.00
    );

CREATE TABLE
    flights (
        flight_no INT auto_increment PRIMARY KEY,
        `from` VARCHAR(100) NOT NULL,
        `to` VARCHAR(100) NOT NULL,
        distance FLOAT DEFAULT 0.0,
        depart_time DATETIME DEFAULT NOW (),
        arrival_time DATETIME DEFAULT NOW ()
    );

CREATE TABLE
    aircraft (
        aircraft_id INT PRIMARY KEY auto_increment,
        manufacturer VARCHAR(100) NOT NULL,
        model VARCHAR(100) NOT NULL,
        range FLOAT DEFAULT 0.0,
        flight_no INT,
        FOREIGN KEY (flight_no) REFERENCES flights (flight_no) ON DELETE CASCADE ON UPDATE CASCADE
    );

CREATE TABLE
    certified (
        emp_id INT,
        aircraft_id INT,
        PRIMARY KEY (emp_id, aircraft_id),
        FOREIGN KEY (emp_id) REFERENCES employee (emp_id) ON DELETE CASCADE ON UPDATE CASCADE,
        FOREIGN KEY (aircraft_id) REFERENCES aircraft (aircraft_id) ON DELETE CASCADE ON UPDATE CASCADE
    );

-- The following Insert statements were generated by GitHub Copilot
-- Inserting data into employee table
INSERT INTO
    employee (name, salary)
VALUES
    ('John Doe', 50000.00),
    ('Jane Smith', 55000.00),
    ('Robert Johnson', 60000.00),
    ('Michael Williams', 65000.00),
    ('Sarah Brown', 70000.00),
    ('Jessica Jones', 75000.00),
    ('Mohamed Garcia', 80000.00),
    ('Emma Martinez', 85000.00),
    ('Liam Anderson', 90000.00),
    ('Noah Thomas', 95000.00),
    ('Oliver Jackson', 100000.00),
    ('William White', 105000.00),
    ('Elijah Harris', 110000.00),
    ('James Martin', 115000.00),
    ('Benjamin Thompson', 120000.00);

-- Inserting data into flights table
INSERT INTO
    flights (
        from_city,
        to_city,
        distance,
        depart_time,
        arrival_time
    )
VALUES
    (
        'Vancouver',
        'Tokyo',
        3000,
        '2022-09-01 12:00:00',
        '2022-09-01 18:00:00'
    ),
    (
        'Toronto',
        'Vancouver',
        3000,
        '2022-09-02 12:00:00',
        '2022-09-02 18:00:00'
    ),
    (
        'Vancouver',
        'New York',
        4000,
        '2022-09-03 12:00:00',
        '2022-09-03 18:00:00'
    ),
    (
        'New York',
        'Vancouver',
        4000,
        '2022-09-04 12:00:00',
        '2022-09-04 18:00:00'
    ),
    (
        'Vancouver',
        'Los Angeles',
        2000,
        '2022-09-05 12:00:00',
        '2022-09-05 18:00:00'
    ),
    (
        'Los Angeles',
        'Vancouver',
        2000,
        '2022-09-06 12:00:00',
        '2022-09-06 18:00:00'
    ),
    (
        'Vancouver',
        'Chicago',
        2500,
        '2022-09-07 12:00:00',
        '2022-09-07 18:00:00'
    ),
    (
        'Chicago',
        'Vancouver',
        2500,
        '2022-09-08 12:00:00',
        '2022-09-08 18:00:00'
    ),
    (
        'Vancouver',
        'Miami',
        3500,
        '2022-09-09 13:30:00',
        '2022-09-09 18:00:00'
    ),
    (
        'Miami',
        'Vancouver',
        3500,
        '2022-09-10 12:00:00',
        '2022-09-10 18:00:00'
    ),
    (
        'Vancouver',
        'Houston',
        3000,
        '2022-09-11 16:00:00',
        '2022-09-11 18:00:00'
    ),
    (
        'Houston',
        'Vancouver',
        3000,
        '2022-09-12 12:00:00',
        '2022-09-12 18:00:00'
    ),
    (
        'Vancouver',
        'Seattle',
        500,
        '2022-09-13 12:00:00',
        '2022-09-13 18:00:00'
    ),
    (
        'Seattle',
        'Vancouver',
        500,
        '2022-09-14 12:00:00',
        '2022-09-14 18:00:00'
    ),
    (
        'Vancouver',
        'San Francisco',
        1500,
        '2022-09-15 12:00:00',
        '2022-09-15 18:00:00'
    );

-- Inserting data into aircraft table
INSERT INTO
    aircraft (manufacturer, model, range, flight_no)
VALUES
    ('Boeing', '747', 8000, 1),
    ('Airbus', 'A380', 8000, 2),
    ('Boeing', '777', 7400, 3),
    ('Airbus', 'A350', 8100, 4),
    ('Boeing', '787', 7300, 5),
    ('Airbus', 'A330', 7300, 6),
    ('Boeing', '767', 5900, 7),
    ('Airbus', 'A320', 5700, 8),
    ('Boeing', '757', 3900, 9),
    ('Airbus', 'A310', 5000, 10),
    ('Boeing', '737', 3500, 11),
    ('Airbus', 'A300', 4800, 12),
    ('Boeing', '727', 2700, 13),
    ('Airbus', 'A220', 3100, 14),
    ('Boeing', '717', 2500, 15);

-- Inserting data into certified table
INSERT INTO
    certified (emp_id, aircraft_id)
VALUES
    (1, 1),
    (2, 2),
    (3, 3),
    (4, 4),
    (5, 5),
    (6, 6),
    (7, 7),
    (8, 8),
    (9, 9),
    (10, 10),
    (11, 11),
    (12, 12),
    (13, 13),
    (14, 14),
    (15, 15);

-- a.Flight numbers of all flights that depart from Vancouver after 13:00
SELECT
    flight_no
FROM
    flights
WHERE
    `from` = 'Vancouver'
    AND TIME(depart_time) > '13:00:00';

-- b.Names of all employees who are certified to operate the Boeing
SELECT
    e.emp_id
FROM
    employee e
    JOIN certified c ON e.emp_id = c.emp_id
    JOIN aircraft a ON c.aircraft_id = a.aircraft_id
WHERE
    a.manufacturer = 'Boeing';

-- c.The flight departs from Vancouver and arrives in Tokyo. The aircraft that the flight is on has a range greater than the distance between Vancouver and Tokyo.
SELECT
    *
FROM
    aircraft a
    JOIN flights f ON a.flight_no = f.flight_no
WHERE
    f.`from` = 'Vancouver'
    AND f.`to` = 'Tokyo'
    AND a.`range` > f.distance;

-- d.
SELECT
    *
FROM
    employee e
    JOIN certified c ON e.emp_id = c.emp_id
    JOIN aircraft a ON c.aircraft_id = a.aircraft_id
    JOIN flights f ON a.flight_no = f.flight_no
WHERE
    a.`range` > f.distance
    AND e.salary > 100000;

-- e.
SELECT
    e.name
FROM
    employee e
    JOIN certified c ON e.emp_id = c.emp_id
    JOIN aircraft a ON c.aircraft_id = a.aircraft_id
WHERE
    a.`range` > 3000
    AND NOT EXISTS (
        SELECT
            1
        FROM
            certified c2
            JOIN aircraft a2 ON c2.aircraft_id = a2.aircraft_id
        WHERE
            c2.emp_id = e.emp_id
            AND a2.manufacturer = 'Boeing'
    );

-- f.
SELECT
    emp_id
FROM
    employee
WHERE
    salary = (
        SELECT
            MIN(salary)
        FROM
            employee
    );

-- Question 2
DROP DATABASE IF EXISTS libraryDB;

CREATE DATABASE libraryDB;

USE libraryDB;

CREATE TABLE
    authors (
        author_id INT PRIMARY KEY AUTO_INCREMENT,
        last_name VARCHAR(100) NOT NULL,
        first_name VARCHAR(100) NOT NULL
    );

CREATE TABLE
    books (
        book_id INT PRIMARY KEY AUTO_INCREMENT,
        title VARCHAR(255) NOT NULL,
        num_pages INT,
        author_id INT,
        FOREIGN KEY (author_id) REFERENCES authors (author_id) ON DELETE CASCADE ON UPDATE CASCADE
    );

CREATE TABLE
    branches (
        branch_id INT PRIMARY KEY AUTO_INCREMENT,
        branch_name VARCHAR(100) NOT NULL,
        address VARCHAR(255) NOT NULL,
        phone_no VARCHAR(15)
    );

CREATE TABLE
    copies (
        copy_id INT PRIMARY KEY AUTO_INCREMENT,
        branch_id INT,
        book_id INT,
        cost DECIMAL(10, 2),
        FOREIGN KEY (branch_id) REFERENCES branches (branch_id) ON DELETE CASCADE ON UPDATE CASCADE,
        FOREIGN KEY (book_id) REFERENCES books (book_id) ON DELETE CASCADE ON UPDATE CASCADE
    );

CREATE TABLE
    borrowers (
        borrower_id INT PRIMARY KEY AUTO_INCREMENT,
        name VARCHAR(100) NOT NULL,
        member_since DATE
    );

CREATE TABLE
    loans (
        loan_id INT PRIMARY KEY AUTO_INCREMENT,
        copy_id INT,
        borrower_id INT,
        due_date DATE,
        FOREIGN KEY (copy_id) REFERENCES copies (copy_id) ON DELETE CASCADE ON UPDATE CASCADE,
        FOREIGN KEY (borrower_id) REFERENCES borrowers (borrower_id) ON DELETE CASCADE ON UPDATE CASCADE
    );

-- Insert statements generated by GitHub Copilot
-- Inserting data into authors table
INSERT INTO
    authors (last_name, first_name)
VALUES
    ('Korth', 'Henry'),
    ('Silberschatz', 'Abraham'),
    ('Sudarshan', 'S.'),
    ('Codd', 'Edgar F.'),
    ('Date', 'C.J.'),
    ('Stonebraker', 'Michael'),
    ('Ullman', 'Jeffrey D.'),
    ('Widom', 'Jennifer'),
    ('Garcia-Molina', 'Hector'),
    ('Elmasri', 'Ramez'),
    ('Navathe', 'Shamkant B.'),
    ('Ramakrishnan', 'Raghu'),
    ('Gehrke', 'Johannes'),
    ('Mannila', 'Heikki'),
    ('Toivonen', 'Hannu');

-- Inserting data into books table
INSERT INTO
    books (title, num_pages, author_id)
VALUES
    ('Database System Concepts', 1376, 1),
    ('Operating System Concepts', 1040, 2),
    ('Database System Implementation', 1242, 3),
    (
        'The Relational Model for Database Management',
        564,
        4
    ),
    ('An Introduction to Database Systems', 1024, 5),
    ('Readings in Database Systems', 678, 6),
    ('Database Systems: The Complete Book', 1248, 7),
    (
        'Data Mining: Practical Machine Learning Tools and Techniques',
        629,
        8
    ),
    ('Database Management Systems', 1065, 9),
    ('Fundamentals of Database Systems', 1272, 10),
    (
        'Database Systems: A Practical Approach to Design, Implementation, and Management',
        1400,
        11
    ),
    ('Database Management Systems', 1102, 12),
    ('Data Mining: Concepts and Techniques', 744, 13),
    ('Data Mining: A Tutorial-Based Primer', 254, 14),
    (
        'Data Mining: Concepts, Models, Methods, and Algorithms',
        822,
        15
    );

-- Inserting data into branches table
INSERT INTO
    branches (branch_name, address, phone_no)
VALUES
    ('Central Library', '123 Main St', '555-1234'),
    ('East Branch', '456 Maple Ave', '555-5678'),
    ('West Branch', '789 Oak Dr', '555-4321'),
    ('North Branch', '321 Pine Ln', '555-8765'),
    ('South Branch', '654 Willow Ct', '555-2345'),
    ('Northeast Branch', '987 Birch Blvd', '555-6789'),
    ('Northwest Branch', '345 Cedar St', '555-3456'),
    ('Southeast Branch', '210 Elm Rd', '555-7890'),
    ('Southwest Branch', '567 Fir Pkwy', '555-4567'),
    ('Downtown Branch', '890 Ash Ave', '555-8901'),
    ('Uptown Branch', '234 Spruce Ln', '555-9012'),
    ('Suburban Branch', '678 Redwood Ct', '555-0123'),
    ('Rural Branch', '123 Cherry St', '555-1234'),
    ('Urban Branch', '456 Dogwood Ave', '555-5678'),
    (
        'Metropolitan Branch',
        '789 Magnolia Dr',
        '555-4321'
    );

-- Inserting data into copies table
INSERT INTO
    copies (branch_id, book_id, cost)
VALUES
    (1, 1, 50.00),
    (2, 2, 60.00),
    (3, 3, 70.00),
    (4, 4, 80.00),
    (5, 5, 90.00),
    (6, 6, 100.00),
    (7, 7, 110.00),
    (8, 8, 120.00),
    (9, 9, 130.00),
    (10, 10, 140.00),
    (11, 11, 150.00),
    (12, 12, 160.00),
    (13, 13, 170.00),
    (14, 14, 180.00),
    (15, 15, 190.00);

-- Inserting data into borrowers table
INSERT INTO
    borrowers (name, member_since)
VALUES
    ('John Doe', '2020-01-01'),
    ('Jane Smith', '2019-02-01'),
    ('Robert Johnson', '2018-03-01'),
    ('Michael Williams', '2017-04-01'),
    ('Sarah Brown', '2016-05-01'),
    ('Jessica Jones', '2015-06-01'),
    ('Mohamed Garcia', '2014-07-01'),
    ('Emma Martinez', '2013-08-01'),
    ('Liam Anderson', '2012-09-01'),
    ('Noah Thomas', '2011-10-01'),
    ('Oliver Jackson', '2010-11-01'),
    ('William White', '2009-12-01'),
    ('Elijah Harris', '2008-01-01'),
    ('James Martin', '2007-02-01'),
    ('Benjamin Thompson', '2006-03-01');

-- Inserting data into loans table
INSERT INTO
    loans (copy_id, borrower_id, due_date)
VALUES
    (1, 1, '2022-12-31'),
    (2, 2, '2022-11-30'),
    (3, 3, '2022-10-31'),
    (4, 4, '2022-09-30'),
    (5, 5, '2022-08-31'),
    (6, 6, '2022-07-31'),
    (7, 7, '2022-06-30'),
    (8, 8, '2022-05-31'),
    (9, 9, '2022-04-30'),
    (10, 10, '2022-03-31'),
    (11, 11, '2022-02-28'),
    (12, 12, '2022-01-31'),
    (13, 13, '2021-12-31'),
    (14, 14, '2021-11-30'),
    (15, 15, '2021-10-31');

-- a
SELECT
    b.branch_name,
    bk.title,
    COUNT(*) AS copy_count
FROM
    copies c
    JOIN branches b ON c.branch_id = b.branch_id
    JOIN books bk ON c.book_id = bk.book_id
GROUP BY
    c.branch_id,
    c.book_id;

-- b
SELECT
    b.branch_name
FROM
    branches b
    LEFT JOIN copies c ON b.branch_id = c.branch_id
WHERE
    c.copy_id IS NULL;

-- c
SELECT DISTINCT
    b.branch_name
FROM
    authors a
    JOIN books bk ON a.author_id = bk.author_id
    JOIN copies c ON bk.book_id = c.book_id
    JOIN branches b ON c.branch_id = b.branch_id
WHERE
    a.last_name = 'Korth';

-- Question 3
DROP DATABASE IF EXISTS companyDB;

CREATE DATABASE companyDB;

USE companyDB;

CREATE TABLE
    employee (
        employee_id INT AUTO_INCREMENT PRIMARY KEY,
        employee_name VARCHAR(100) NOT NULL,
        street VARCHAR(255) NOT NULL,
        city VARCHAR(100) NOT NULL
    );

CREATE TABLE
    company (
        company_id INT AUTO_INCREMENT PRIMARY KEY,
        company_name VARCHAR(100) NOT NULL,
        city VARCHAR(100) NOT NULL
    );

CREATE TABLE
    works (
        works_id INT AUTO_INCREMENT PRIMARY KEY,
        employee_id INT,
        company_id INT,
        salary DECIMAL(10, 2) NOT NULL DEFAULT 0,
        FOREIGN KEY (employee_id) REFERENCES employee (employee_id) ON DELETE CASCADE ON UPDATE CASCADE,
        FOREIGN KEY (company_id) REFERENCES company (company_id) ON DELETE CASCADE ON UPDATE CASCADE
    );

CREATE TABLE
    manages (
        manages_id INT AUTO_INCREMENT PRIMARY KEY,
        employee_id INT,
        manager_id INT,
        FOREIGN KEY (employee_id) REFERENCES employee (employee_id) ON DELETE CASCADE ON UPDATE CASCADE,
        FOREIGN KEY (manager_id) REFERENCES employee (employee_id) ON DELETE CASCADE ON UPDATE CASCADE
    );

-- Insert statements generated by GitHub Copilot
-- Inserting data into employee table
INSERT INTO
    employee (employee_name, street, city)
VALUES
    ('John Doe', '123 Main St', 'New York'),
    ('Jane Smith', '456 Maple Ave', 'Los Angeles'),
    ('Robert Johnson', '789 Oak Dr', 'Chicago'),
    ('Michael Williams', '321 Pine Ln', 'Houston'),
    ('Sarah Brown', '654 Willow Ct', 'Phoenix'),
    ('Jessica Jones', '987 Birch Blvd', 'Philadelphia'),
    ('Mohamed Garcia', '345 Cedar St', 'San Antonio'),
    ('Emma Martinez', '210 Elm Rd', 'San Diego'),
    ('Liam Anderson', '567 Fir Pkwy', 'Dallas'),
    ('Noah Thomas', '890 Ash Ave', 'San Jose'),
    ('Oliver Jackson', '234 Spruce Ln', 'Austin'),
    ('William White', '678 Redwood Ct', 'Jacksonville'),
    ('Elijah Harris', '456 Maple Ave', 'Los Angeles'),
    ('James Martin', '456 Dogwood Ave', 'Los Angeles'),
    (
        'Benjamin Thompson',
        '789 Magnolia Dr',
        'San Francisco'
    ),
    (
        'Ausar Thompson',
        '789 Magnolia Dr',
        'San Francisco'
    ),
    (
        'Amen Thompson',
        '789 Magnolia Dr',
        'San Francisco'
    );

-- Inserting data into company table
INSERT INTO
    company (company_name, city)
VALUES
    ('First Bank Corporation', 'New York'),
    ('Small Bank Corporation', 'Los Angeles'),
    ('Big Tech Inc.', 'San Francisco'),
    ('Healthcare United', 'Chicago'),
    ('Education Plus', 'Boston'),
    ('Retail Giants', 'Dallas'),
    ('Food & Stuff', 'Los Angeles'),
    ('Cars & More', 'Detroit'),
    ('Books & Co.', 'Seattle'),
    ('Sports Unlimited', 'Denver'),
    ('Fashion Forward', 'Miami'),
    ('Travel & Tourism', 'Los Angeles'),
    ('Real Estate Empire', 'Las Vegas'),
    ('Insurance Secure', 'Phoenix'),
    ('Energy & Utilities', 'Houston');

-- Inserting data into works table
INSERT INTO
    works (employee_id, company_id, salary)
VALUES
    (1, 1, 50000.00),
    (2, 2, 60000.00),
    (3, 3, 70000.00),
    (4, 4, 80000.00),
    (5, 5, 90000.00),
    (6, 6, 100000.00),
    (7, 7, 110000.00),
    (8, 8, 120000.00),
    (9, 9, 130000.00),
    (10, 10, 140000.00),
    (11, 11, 150000.00),
    (12, 12, 160000.00),
    (13, 2, 55000.00),
    (14, 2, 55000.00),
    (15, 3, 75000.00),
    (16, 3, 275000.00),
    (17, 3, 1075000.00);

-- Inserting data into manages table
INSERT INTO
    manages (employee_id, manager_id)
VALUES
    (1, 2),
    (2, 3),
    (3, 4),
    (4, 5),
    (5, 6),
    (6, 7),
    (7, 8),
    (8, 9),
    (9, 10),
    (10, 11),
    (11, 12),
    (12, 13),
    (13, 14),
    (14, 15),
    (15, 1),
    (16, 17);

-- a
SELECT
    e.employee_name,
    e.street,
    e.city
FROM
    employee e
    JOIN works w ON e.employee_id = w.employee_id
    JOIN company c ON w.company_id = c.company_id
WHERE
    c.company_name = 'First Bank Corporation'
    AND w.salary > 10000;

-- b
SELECT
    e.employee_name
FROM
    employee e
    JOIN works w ON e.employee_id = w.employee_id
    JOIN company c ON w.company_id = c.company_id
WHERE
    e.city = c.city;

-- c
SELECT DISTINCT
    e1.employee_name
FROM
    employee e1
    LEFT JOIN manages m ON e1.employee_id = m.employee_id
    LEFT JOIN employee e2 ON m.manager_id = e2.employee_id
WHERE
    e1.city = e2.city
    AND e1.street = e2.street;

-- d
SELECT
    e.employee_name
FROM
    employee e
    JOIN works w ON e.employee_id = w.employee_id
    JOIN company c ON w.company_id = c.company_id
WHERE
    c.company_name <> 'First Bank Corporation';

-- e
SELECT
    e.employee_name
FROM
    employee e
    JOIN works w ON e.employee_id = w.employee_id
WHERE
    w.salary > ALL (
        SELECT
            w2.salary
        FROM
            works w2
            JOIN company c ON w2.company_id = c.company_id
        WHERE
            c.company_name = 'Small Bank Corporation'
    );

-- f
SELECT
    c1.company_name
FROM
    company c1
WHERE
    NOT EXISTS (
        SELECT
            city
        FROM
            company c2
        WHERE
            c2.company_name = 'Small Bank Corporation'
            AND NOT EXISTS (
                SELECT
                    city
                FROM
                    company c3
                WHERE
                    c3.company_name = c1.company_name
                    AND c3.city = c2.city
            )
    );

-- g
SELECT
    e.employee_name
FROM
    employee e
    JOIN works w ON e.employee_id = w.employee_id
WHERE
    w.salary > (
        SELECT
            AVG(w2.salary)
        FROM
            works w2
        WHERE
            w2.company_id = w.company_id
    );

-- h
SELECT
    c.company_name
FROM
    company c
    JOIN works w ON c.company_id = w.company_id
GROUP BY
    c.company_name
ORDER BY
    SUM(w.salary) ASC
LIMIT
    1;